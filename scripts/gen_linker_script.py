"""Generates the linkerscript (.ld) from .link.toml files in src"""

from os import listdir
from os.path import isfile, isdir, join
import sys
import toml
# pylint: disable-next=import-error
from cu import read_linker_config, read_uking_data_symbols, read_uking_func_symbols

SRC = "src"
EXTENSION = ".link.toml"
CUSTOM_HEADER = """
/*
 *  This is a generated file
 *  DO NOT EDIT THIS FILE DIRECTLY
 *  Generate with genLinkerScript.py instead
 */

"""
# Keys in .link.toml
TYPE_FUNC = "func"
TYPE_DATA = "data"
TYPE_ADDR = "addr"
KEY_SYM = "sym"
KEY_ADDR = "addr"
KEY_UKING_NAME = "uking_name"
# Offset for symbols in main (beginning of skyline - beginning of main)
MAIN_OFFSET = "0x2d91000"


def run():
    """Main"""
    config = read_linker_config()
    if config is None:
        sys.exit(-1)
    func_map = {}
    data_map  = {}
    addr_map = {}
    uking_addr_set = set()
    error_count = 0
    process_path(SRC, func_map, data_map, addr_map)
    if len(data_map) > 0:
        uking_data_symbols = {}
        read_uking_data_symbols(config["data_symbols"], uking_addr_set, uking_data_symbols)
        for mangled_name, uking_name in data_map.items():
            if not resolve_link_to_uking(\
                addr_map, uking_name, mangled_name, uking_data_symbols, "data"):
                error_count+=1

    if len(func_map) > 0:
        uking_func_symbols = {}
        read_uking_func_symbols(config["uking_functions"], uking_addr_set, uking_func_symbols)
        for mangled_name, uking_name in func_map.items():
            if not resolve_link_to_uking(\
                addr_map, uking_name, mangled_name, uking_func_symbols, "func"):
                error_count+=1

    print("Loaded",len(addr_map),"symbols to write.",error_count,"errors")
    with open(config["target"], "w+", encoding="utf-8") as target_file:
        target_file.write(CUSTOM_HEADER)
        target_file.write("blank = 0;\n")
        for addr, symbol in addr_map.items():
            target_file.write(create_linker_script_line(addr, symbol))
    print("Written", config["target"])


def process_path(path, func_map, data_map, addr_map):
    """Recursively process scripts under path"""
    if isfile(path):
        if path.endswith(EXTENSION):
            process_file(path, func_map, data_map, addr_map)
    elif isdir(path):
        for sub_path in listdir(path):
            process_path(join(path, sub_path), func_map, data_map, addr_map)

def process_file(path, func_map, data_map, addr_map):
    """Process .link.toml file"""
    with open(path, "r", encoding="utf-8") as toml_file:
        links = toml.load(toml_file)
        if TYPE_FUNC in links:
            for func in links[TYPE_FUNC]:
                if KEY_UKING_NAME in func:
                    func_map[func[KEY_SYM]] = func[KEY_UKING_NAME]
                else:
                    func_map[func[KEY_SYM]] = func[KEY_SYM]
        if TYPE_DATA in links:
            for data in links[TYPE_DATA]:
                if KEY_UKING_NAME in data:
                    data_map[data[KEY_SYM]] = data[KEY_UKING_NAME]
                else:
                    data_map[data[KEY_SYM]] = data[KEY_SYM]
        if TYPE_ADDR in links:
            for addr in links[TYPE_ADDR]:
                addr_map[addr[KEY_ADDR]].add(addr[KEY_SYM])
                print(f"Warning: Linking directly to address: {addr[KEY_SYM]} to {addr[KEY_ADDR]}")

def resolve_link_to_uking(addr_map, uking_name, mangled_name, uking_symbols, symbol_type):
    """
        Search for uking_name in uking_symbols,
            and add the address to addr_map which links to mangled_name
        Return true if successful
    """
    if uking_name in uking_symbols:
        addr_map[uking_symbols[uking_name]] = mangled_name
        return True

    if mangled_name != uking_name:
        print(f"Error: Fail to link {symbol_type} symbol {mangled_name} ({uking_name})")
    else:
        print(f"Error: Fail to link {symbol_type} symbol {mangled_name}")
    return False

def create_linker_script_line(address, mangled_name):
    """Generate line in syms.ld"""
    return f"{mangled_name} = {address} - {MAIN_OFFSET};\n"

if __name__ == "__main__":
    run()
